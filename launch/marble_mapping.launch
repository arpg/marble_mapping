<?xml version="1.0" encoding="UTF-8"?>
<launch>

  <!-- Resolution for local-only map -->
  <arg name="resolution" default="0.2" />
  <!-- Resolution to build merged map in and create diff maps -->
  <arg name="merged_resolution" default="0.2" />
  <!-- Fixed map frame (set to 'map' if SLAM or localization running!) -->
  <arg name="frame_id" default="world" />
  <!-- Enable multiagent processing, such as diff creation and merging -->
  <arg name="multiagent" default="true" />
  <!-- Input type: 0=none, 1=pointcloud, 2=octomap -->
  <arg name="input" default="1" />
  <!-- Data source to integrate (PointCloud2) -->
  <arg name="cloud_in" default="points" />
  <!-- Maximum range to integrate (speedup!) -->
  <arg name="max_range" default="7.0" />
  <!-- Number of threads to use. Setting '0' or a value greater than maximum value
       will use the OMP_NUM_THREADS variable or maximum CPU threads if not set.
       At low resolutions recommend '1' for best performance -->
  <arg name="num_threads" default="0" />
  <!-- Resolution to downsample point cloud using Voxel Grid Filter.  Set to 0 for none -->
  <arg name="downsample_size" default="0.0" />
  <!-- Secondary camera settings for a restricted view map, such as for an artifact camera -->
  <arg name="build_camera_map" default="true" />
  <arg name="publish_camera_map" default="true" />
  <arg name="publish_camera_view" default="true" />
  <arg name="camera_range" default="5.0" />
  <!-- FOV must be < 180 degrees. Input 180.0 for full 360 coverage. -->
  <arg name="camera_horizontal_fov" default="90.0" />
  <arg name="camera_vertical_fov" default="60.0" />
  <!-- Whether to publish merged maps -->
  <arg name="publish_merged_binary" default="true" />
  <arg name="publish_merged_full" default="false" />
  <!-- How often to publish octomaps and optional maps (marker array, point cloud) -->
  <arg name="publish_duration" default="0.1" />
  <arg name="publish_optional_duration" default="0.2" />
  <!-- Whether to publish the marker arrays and point cloud -->
  <arg name="publish_marker_array" default="true" />
  <arg name="publish_free_space" default="false" />
  <arg name="publish_point_cloud" default="false" />
  <arg name="publish_point_cloud_diff" default="false" />
  <!-- Whether to publish neighbor maps to neighbors/VEHICLE/map -->
  <arg name="publish_neighbor_maps" default="false" />
  <!-- Whether to remove ceiling from marker arrays and point clouds, and how deep to check -->
  <arg name="remove_ceiling" default="true" />
  <arg name="remove_ceiling_depth" default="4" />
  <!-- Whether to publish the diff maps -->
  <arg name="publish_diffs" default="true" />
  <!-- Number of new nodes required to create a new diff -->
  <arg name="diff_threshold" default="1000" />
  <!-- How many seconds to publish and reset diff map -->
  <arg name="diff_duration" default="10.0" />
  <!-- Whether diffs should be based on self map (false) or merged map (true) -->
  <arg name="diff_merged" default="false" />
  <!-- Enable traversability info to be integrated into occupied cells from intensity channel of input pointcloud -->
  <arg name="enable_traversability"           default="false" />
  <!-- Enable sharing of traversability info between agents for global terrain-aware planning  -->
  <arg name="enable_traversability_sharing"   default="false" />
  <!-- Remove ground plane occupancy from occupancy grid (boolean)-->
  <arg name="filter_ground" default="false" />

  <arg name="sensor_model/hit" default=".95" />
  <arg name="sensor_model/miss" default=".48" />
  <arg name="sensor_model/min" default=".12" />
  <arg name="sensor_model/max" default=".97" />

  <!-- <arg name="marble_mapping_name"     default="marble_mapping"           if="$(eval ns=='')"/> -->
  <!-- <arg name="marble_mapping_name"     default="marble_mapping_$(arg ns)"     unless="$(eval ns=='')"/> -->
  <!-- <node pkg="marble_mapping" type="marble_mapping_node" name="$(arg marble_mapping_name)" output="screen"> -->
  <node pkg="marble_mapping" type="marble_mapping_node" name="marble_mapping" output="log">
    <param name="resolution" value="$(arg resolution)" />
    <param name="merged_resolution" value="$(arg merged_resolution)" />
    <param name="frame_id" type="string" value="$(arg frame_id)" />
    <param name="multiagent" value="$(arg multiagent)" />
    <param name="input" value="$(arg input)" />
    <param name="sensor_model/max_range" value="$(arg max_range)" />
    <param name="num_threads" value="$(arg num_threads)" />
    <param name="downsample_size" value="$(arg downsample_size)" />

    <param name="build_camera_map" value="$(arg build_camera_map)" />
    <param name="publish_camera_map" value="$(arg publish_camera_map)" />
    <param name="publish_camera_view" value="$(arg publish_camera_view)" />
    <param name="camera_range" value="$(arg camera_range)" />
    <param name="camera_horizontal_fov" value="$(arg camera_horizontal_fov)" />
    <param name="camera_vertical_fov" value="$(arg camera_vertical_fov)" />

    <param name="publish_merged_binary" value="$(arg publish_merged_binary)" />
    <param name="publish_merged_full" value="$(arg publish_merged_full)" />

    <param name="publish_duration" value="$(arg publish_duration)" />
    <param name="publish_optional_duration" value="$(arg publish_optional_duration)" />
    <param name="publish_marker_array" value="$(arg publish_marker_array)" />
    <param name="publish_free_space" value="$(arg publish_free_space)" />
    <param name="publish_point_cloud" value="$(arg publish_point_cloud)" />
    <param name="publish_point_cloud_diff" value="$(arg publish_point_cloud_diff)" />
    <param name="publish_neighbor_maps" value="$(arg publish_neighbor_maps)" />

    <param name="remove_ceiling" value="$(arg remove_ceiling)" />
    <param name="remove_ceiling_depth" value="$(arg remove_ceiling_depth)" />

    <param name="publish_diffs" value="$(arg publish_diffs)" />
    <param name="diff_threshold" value="$(arg diff_threshold)" />
    <param name="diff_duration" value="$(arg diff_duration)" />
    <param name="diff_merged" value="$(arg diff_merged)" />

    <param name="enable_traversability"           value="$(arg enable_traversability)" />
    <param name="enable_traversability_sharing"   value="$(arg enable_traversability_sharing)" />

    <param name="filter_ground" value="$(arg filter_ground)" />

    <param name="sensor_model/hit" value="$(arg sensor_model/hit)" />
    <param name="sensor_model/miss" value="$(arg sensor_model/miss)" />
    <param name="sensor_model/min" value="$(arg sensor_model/min)" />
    <param name="sensor_model/max" value="$(arg sensor_model/max)" />

    <remap from="cloud_in" to="$(arg cloud_in)" />

    <!-- The robot's base frame in which the ground plane detection is performed -->
    <!-- <remap from="base_frame_id" to="/X1/base_link" /> -->

  </node>

  <!-- <include file="$(find marble_virtual_comms)/launch/marble_virtual_comms.launch">
      <arg name="vehicle" value="$(arg ns)"/>
  </include> -->
</launch>
